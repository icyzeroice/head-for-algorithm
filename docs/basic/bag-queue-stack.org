#+TITLE: 集合数据类型 :: Bag & Queue & Stack
#+AUTHOR: 零度冰华
#+EMAIL: ziv3@outlook.com
#+DATE: 2018/10/20/09:25

* Linked List（链表）

** 表尾插入节点 / 表头插入节点 / 表头删除节点

** 删除指定的节点 / 表尾删除节点

- 单向链表 :: 需要先用 O(N) 的时间遍历到倒数第二个节点，然后再赋 null

- 双向链表 :: 删除尾节点很简单


* Bag（背包）

** 特征

*** 不支持删除元素

*** 迭代顺序不确定

** 目的

1. 收集元素

2. 迭代遍历所有收集到的元素（不强调顺序，每次遍历顺序可能都不同）

** 实现



* Queue（队列）

** 特征

*** FIFO

*** 保存元素的同时保存他们的相对顺序

*** 使入列顺序和出列顺序相同

** 目的

优先服务等待时间最长的人

** 实现

- 单向链表 :: 操作的时间总是和集合大小 *无关*




* Stack（下压栈）

** 特征

*** LIFO

*** 处理顺序与压入顺序相反

** 实现

** 应用

*** Dijkstra 双栈算数表达式求值算法

*** 定容栈

1. 容量固定的字符串栈，只能处理 String

2. 记得将 pop 的的元素设为 null，防止对象游离

  - 对象游离 :: 如用 Java 实现栈时，可能会在 pop 时仅移动栈顶的索引，而没有释放实际的引用



* 综述

| 数据结构         | 优点                         | 缺点                     |
|------------------+------------------------------+--------------------------|
| 数组（顺序存储） | 通过索引可以直接访问任意元素 | 初始化时需要知道元素数量 |
| 链表（链式存储） | 占用空间大小和元素数量成正比 | 通过引用访问任意元素     |

