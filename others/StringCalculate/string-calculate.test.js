/**

2.实现一个大数相加相减函数

要求：代码具备一定的可读性，不能查阅相关资料。

第二题的测试用例如下：

用例1: console.log(calculate('999', '+', '1') === '1000');

用例2: console.log(calculate('1', '-',  '999') === '-998');

用例3: console.log(calculate('123', '+', '123') === '246');

用例4: console.log(calculate('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999', '+',  '1')==='1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000');

用例5: console.log(calculate('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999', '-',  '1')==='999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999998');

*/

const calculate = require('./string-calcutate')

test('Test Canary', () => {
  expect(true).toBe(true)
})

test('Test Calculate', () => {
  expect(calculate('999', '+', '1')).toBe('1000')
  expect(calculate('1', '-', '999')).toBe('-998')
  expect(calculate('123', '+', '123')).toBe('246')
  expect(calculate('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999', '+',  '1')).toBe('1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000')
  expect(calculate('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999', '-',  '1')).toBe('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999998')
})